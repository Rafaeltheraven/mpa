#!/bin/bash

clear=False

pid="/tmp/mpa-radio.pid"

argarray=()

commarray=()

for arg in "$@"
do
	if [[ "$arg" = "--"* ]]; then
		argarray+=("$arg")
	else
		if [[ "$arg" = "-c" ]]; then
			clear=True
		else
			commarray+=("$arg")
		fi
	fi
done

mpa_rand() {
	# Get a list of all the albums
	if [[ "$2" = "-t" ]]; then
		if [[ "$1" = "" ]]; then
			track="$(mpc $argarray list title)"
		else
			tracks=$(mpc $argarray list title "${1}")
		fi
		readarray -t splitted <<<"$tracks"
		size=${#splitted[@]}
		index=$(($RANDOM % $size))
		title=${splitted[$index]}
		files="$(mpc $argarray find ((title == '$title')))"
		readarray -t splitted <<<"$files"
		size=${#splitted[@]}
		index=$(($RANDOM % $size))
		file=${splitted[$index]}
		mpc $argarray add "$file"
		dump="$(mpc $argarray play)"
	else
		if [[ "$1" = "" ]]; then
			albums="$(mpc $argarray list album)"
		else
			albums=$(mpc $argarray list album "${1}")
		fi
		# Split bu newline
		readarray -t splitted <<<"$albums"
		# Get the size
		size=${#splitted[@]}
		# Get a random index
		index=$(($RANDOM % $size))
		# Get a random album
		album=${splitted[$index]}
		if [[ $clear = True ]]; then
			mpc $argarray clear
		fi
		# Find all the tracks that belong to this album
		mpc $argarray findadd album "$album"
		# Play just to be sure
		dump="$(mpc $argarray play)"
	fi
}

mpa_two() {
	if [[ "$2" = "-t" ]]; then
		pos="$(mpc $argarray -f %position% current)"
		playlist="$(mpc playlist)"
		readarray -t splitted <<<"$playlist"
		sizes=${#splitted[@]}
		if [[ "$pos" = "" ]]; then
			pos=0
		fi
		if [[ "$playlist[@]" = "" ]]; then
			sizes=0
		fi
		diff="$((sizes - pos))"
		while [[ $diff -lt 1 || $sizes -lt 2 ]]
		do
			mpa_rand "$1" -t
			let "sizes++"
			diff="$((sizes - pos))"
		done
	else
		playlist="$(mpa_playlist)"
		readarray -t splitted <<<"$playlist"
		sizes=${#splitted[@]}
		if [[ "$playlist[@]" = "" ]]; then
			sizes=0
		fi
		while [[ $sizes -lt 2 ]]
		do
			mpa_rand "$1"
			let "sizes++"
		done
		current="$(mpc $argarray -f '%albumartist% - %album%' current)"
		i=0
		playlist="$(mpa_playlist)"
		readarray -t splitted <<<"$playlist"
		sizes=${#splitted[@]}
		while [[ $i -lt $sizes ]]
		do
			found="${splitted[$i]}"
			if [[ "$found" = "$current" ]]; then
				let "i++"
				if [[ $i -ge $sizes ]]; then
					mpa_rand "$1"
				fi
			fi
			let "i++"
		done
	fi

}

mpa_radio() {
	stateArg="$1"
	case $stateArg in
	start)
		echo $BASHPID > "$pid"
		searchArg="$2"
		if [[ $clear = True ]]; then
			dump="$(mpc $argarray clear)"
			clear=False
		fi
		mpa_two "$2" "$3"
		if [[ "$3" = "-t" ]]; then
			while [[ "" = "" ]]
			do
				dump="$(mpc $argarray current --wait)"
				mpa_two "$searchArg" -t
			done
		else
			while [[ "" = "" ]]
			do
				prev="$(mpc $argarray -f '%albumartist% - %album%' current)"
				curr="$prev"
				while [[ "$prev" = "$curr" ]]
				do
					curr="$(mpc $argarray -f '%albumartist% - %album%' current --wait)"
				done
				mpa_two "$searchArg"
			done
		fi
	;;
	stop)
		kill -9 "$(cat $pid)"
		rm "$pid"
		dump="$(mpc $argarray stop)"
		if [[ $clear = True ]]; then
			dump="$(mpc $argarray clear)"
		fi
	;;
	status)
		if [ -f $pid ]; then
			echo "MPA Radio is running"
		else
			echo "MPA Radio is stopped"
		fi
	;;
	*)
		echo "Usage: mpa radio {start|stop|status} [search args]"
	;;
	esac
}

mpa_next() {
	# Get a list containing the album of each track in the queue. Meaning we have as many entries per album as there are tracks in the queue
	playlist="$(mpc $argarray -f '%albumartist% - %album%' playlist)"
	# Split by newline
	readarray -t splitted <<<"$playlist"
	# Get the index of the currently playing track
	i="$(mpc $argarray -f %position% current)"
	# Get the album of the currently playing track
	current="$(mpc $argarray -f '%albumartist% - %album%' current)"
	# Calculate how many tracks there are
	max=$(( ${#splitted[@]} ))
	finished=False
	# Now we loop up, for loops are wonky so while
	while [[ $i -lt $max && $finished = False ]]
	do
		# Get the album at this index
		album="${splitted[i]}"
		# As long as the album for this track is the same as the one for the current track, keep counting
		if [[ "$current" = "$album" ]]; then
			let "i++"
		else
			finished=True
		fi
	done
	let "i++"
	# Play the track at 1 higher than the last track in the album
	mpc $argarray play "$i"
	if [[ $clear = True ]]; then
		# To clear, we simply keep removing tracks from the queue until we reach 0
		j=$i
		let "j--"
		while [[ $j -gt 0 ]]
		do
			mpc $argarray del "$j"
			let "j--"
		done
	fi
}

mpa_prev() {
	playlist="$(mpc $argarray -f '%albumartist% - %album%' playlist)"
	readarray -t splitted <<<"$playlist"
	i="$(mpc $argarray -f %position% current)"
	let "i--"
	prev="${splitted[i]}"
	finished=False
	while [[ $finished = False ]]
	do
		album="${splitted[i]}"
		if [[ "$prev" != "$album" ]]; then
			finished=True
		fi
		let "i--"
	done
	prev="$album"
	finished=False
	while [[ $finished = False && $i -gt 0 ]]
	do
	        album="${splitted[i]}"
	        if [[ "$prev" != "$album" ]]; then
	        	finished=True
	        	let "i++"
	        else
	        	let "i--"
	        fi
	done
	let "i++"
	mpc $argarray play "$i"

}

mpa_crop() {
	playlist="$(mpc $argarray -f '%albumartist% - %album%' playlist)"
	readarray -t splitted <<<"$playlist"
	i="$(mpc $argarray -f %position% current)"
	counter=$i
	let "i--"
	curr=${splitted[i]}
	j=$i
	max=$(( ${#splitted[@]} ))
	while [[ $j -lt $max ]]
	do
		album="${splitted[$j]}"
		if [[ "$album" != "$curr" ]]; then
			mpc $argarray del "$counter"
		else
			let "counter++"
		fi
		let "j++"
	done
	j=$i
	counter="$j"
	let "counter++"
	while [[ $j -ge 0 ]]
	do
		album="${splitted[$j]}"
		if [[ "$album" != "$curr" ]]; then
			mpc $argarray del "$counter"
		fi
		let "j--"
		let "counter--"
	done
}

mpa_playlist() {
	playlist="$(mpc $argarray -f '%albumartist% - %album%' playlist)"
	if [[ "$playlist" != "" ]]; then
		readarray -t splitted <<<"$playlist"
		declare -A seen
		uniq=()
		for album in "${splitted[@]}"; do
			[[ ${seen[$album]} ]] && continue
			uniq+=( "$album" )
			seen[$album]=x
		done
		printf '%s\n' "${uniq[@]}"
	fi
}

mpa_current() {
	echo "$(mpc $argarray -f '%albumartist% - %album%' current)"
}

mpa_play() {
	index="$1"
	if [[ $index -lt 1 || "$index" = "" ]]; then
		mpc play
	else
		playlist="$(mpc $argarray -f '%albumartist% - %album%' playlist)"
		readarray -t splitted <<<"$playlist"
		local size=${#splitted[@]}
		i=0
		newIndex=0
		prev=""
		while [[ $i -lt $index && $newIndex -lt $size ]]
		do
			album="${splitted[newIndex]}"
			if [[ "$album" != "$prev" ]]; then
				let "i++"
				prev="$album"
			fi
			let "newIndex++"
		done
		mpc $argarray play "$newIndex"
		if [[ $cclear = True ]]; then
			j=$newIndex
			let "j--"
			while [[ $j -gt 0 ]]
			do
				mpc $argarray del "$j"
				let "j--"
			done
		fi
	fi
}

mpa_shuffle() {
	local playlist="$(mpa_playlist)"
	readarray -t splitted <<<"$playlist"
	shuffled=$(shuf -e "${splitted[@]}")
	
}

mpa_queue() {
	playlist="$(mpc $argarray -f '%albumartist% - %album%' playlist)"
	readarray -t splitted <<<"$playlist"
	current="$(mpc $argarray -f '%albumartist% - %album%' current)"
	next=""
	for album in "${splitted[@]}"; do
		if [[ "$album" != "$current" ]]; then
			next="$album"
			break
		fi
	done
	echo "$next"
}

mpa_del() {
	playlist="$(mpc $argarray -f '%albumartist% - %album%' playlist)"
	i="$1"
	readarray -t splitted <<<"$playlist"
	prev=""
	counter=0
	j=0
	while [[ $counter -lt $i ]]
	do
		album="${splitted[$j]}"
		if [[ "$album" != "$prev" ]]; then
			let "counter++"
			prev="$album"
		else
			let "j++"
		fi
	done
	hold="$j"
	let "hold++"
	album2="${splitted[$j]}"
	while [[ "$album" = "$album2" ]]
	do
		mpc del "$hold"
		let "j++"
		album2="${splitted[$j]}"
	done
}

mpa_help() {
	# Should probably write a better help but w/e
	echo "Usage: mpa <command> [options]"
	echo "Read the README for more info"
}

mpa_opts() {
	opt="$1"

	case "$opt" in
		random) mpa_rand "$2" "$3" ;;
		next) mpa_next ;;
		prev) mpa_prev ;;
		playlist) mpa_playlist ;;
		current) mpa_current ;;
		queued) mpa_queue ;;
		play) mpa_play $2 ;;
		crop) mpa_crop ;;
		radio) (mpa_radio "$2" "$3" "$4" &) &;;
		help) mpa_help ;;
		del) mpa_del "$2" ;;
		shuffle) mpa_shuffle ;;
		*) mpc $argarray "$@" ;;
	esac
}

mpa_opts "${commarray[@]}"
